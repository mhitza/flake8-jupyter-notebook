#!/usr/bin/env node
// vi: set ft=javascript :
const fs            = require('fs');
const child_process = require('child_process');


// Example error
// test.ipynb#In[2]:4:1: E305 expected 2 blank lines after class or function definition, found 1
const flake8_error_format = new RegExp(/^([^#]+)[^:]*:(\d+):(\d+): (\w\d+) (.*)/);

let has_errors = false;

const debug = process.env.INPUT_DEBUG === 'true';

const ignore_rules = process.env.INPUT_IGNORE;

let ignore_regexps = [];
if (ignore_rules !== undefined && ignore_rules.trim() !== "") {
  ignore_regexps = ignore_rules.trim().split("\n").map(e => new RegExp(e));
}

for(let notebook_path of find_notebook_files('.')) {
  if (ignore_regexps.some(re => re.test(notebook_path))) {
    if (debug) {
      process.stdout.write(notebook_path + " ignored via regexp rule\n");
    }

    continue;
  }


  if (debug) {
    process.stdout.write(notebook_path + "\n");
  }

  let notebook_lines = fs.readFileSync(notebook_path, { encoding: 'utf8', flag: 'r' }).split("\n");
      notebook_lines.unshift(null); // this way offset lines to start at index 1

  let source_blocks = find_source_blocks(notebook_lines);

  let transformed_source_blocks = source_blocks

    .map(({ source_line, lines_of_code }) => { // returns array of formatted lines; ready to join()

      let source_code_lines = notebook_lines.slice(source_line, source_line + lines_of_code);

      // add a newline as the last element of the array otherwise we're going to have bigger troubles
      // when merging blocks, as the last line never contains a newline
      source_code_lines[source_code_lines.length - 1] = source_code_lines[source_code_lines.length - 1]
        .replace(/",?$/, '\n",');

      return source_code_lines.map((line) => {
          return line // remove enclosing quotes and insert true newline & quotes
            .trim()
            .replace(/^"/, '')
            .replace(/",?$/, '')
            .replace(/\\\\/g, "\\")
            .replace(/\\"/g, '"')
            .replace(/\\n/g, "\n");
        });
    });

  if (transformed_source_blocks.length === 0) {
    process.stdout.write(notebook_path + " skipped, as it's either an empty file or unparsable!\n");
    continue;
  }

  const extracted_source_code = transformed_source_blocks
    .reduce((accumulator, current) => { // without initial value accumulator is first value of array
      return accumulator.concat(current);
    }, []); // Add empty array as initial value to prevent "Reduce of empty array with no initial value" error


  let reported_errors = child_process
    .spawnSync('flake8', ['--exit-zero', '-'], { input: extracted_source_code.join(''), encoding: 'utf8' })
    .stdout
    .split("\n");


  reported_errors.forEach((reported_error) => {
    if (debug) {
      console.log(reported_error);
    }

    let error_information = reported_error.match(flake8_error_format);
    
    if (!error_information) {
      return;
    }

    has_errors = true;

    let { file_line_number, block_line_number } = absolute_line_number(
      parseInt(error_information[2], 10),
      source_blocks
    );

    if (error_information[4] === 'E302' && block_line_number === 0) {
      // don't report on E302 expected 2 blank lines, found 0
      // as it will be constantly reported for definitions at the top of the block
      return;
    }

    if (error_information[4] === 'E305' && block_line_number === 0) {
      // don't report on Expected 2 blank lines after end of function or class
      // when reported for the first line of a block
      return;
    }

    if (error_information[4] === 'E402') {
      // don't report on E402 module level import not at top of file
      // as it's custom for each code block to specify its additional imports,
      // at least from the examples I've seen
      return;
    }

    if (error_information[4] === 'F821' && error_information[5].includes("'display'")) {
      // don't report on F821 undefined name 'display'
      // as display is a builtin function in Jupyter Notebooks
      // and flake8 doesn't like it
      return;
    }

    // 4 is the indentation level of embedded source code, +1 for the quote character
    let column        = error_information[3] + 5;
    let error_message = `${error_information[4]} ${error_information[5]}`;

    process.stdout.write(
      `::error file=${notebook_path},line=${file_line_number},col=${column}::${error_message}\n`
    );
  });
}


if (has_errors) {
  process.exit(1);
}


// HELPER FUNCTIONS
function* find_notebook_files(directory_path) {
  let directory = fs.opendirSync(directory_path);
  let entry;
  while ((entry = directory.readSync()) !== null) {
    if (entry.isFile()) {
      const filename = entry.name;
      const path = directory_path + '/' + filename;
      if (filename.match(/.ipynb$/)) {
        yield path;
      }
    }

    if (entry.isDirectory()) {
      if (entry.name.match(/^\.git$/)) {
        continue; // skip .git folder traversal for improved speed
      }

      yield* find_notebook_files(directory_path + '/' + entry.name);
    }
  }

  directory.close();
}

// locate within the notebook lines the source blocks, their starting
// line, and number of lines of code contained within
function find_source_blocks(lines) {
  let source_blocks = [];

  for(let i = 1; i < lines.length;) {
    let match = lines[i].match(/^\s{3}"source":/);

    let cell_type = find_cell_type(i, lines);

    // Also make sure to ignore empty code blocks, see https://github.com/mhitza/flake8-jupyter-notebook/issues/1
    if (match && lines[i].match(/[^\]],?$/)) {
      let count = count_source_lines(i, lines);

      if (cell_type === 'code') {
        // skip anything else, like markdown
        source_blocks.push({
          source_line: i + 1,
          lines_of_code: count
        });
      }
      i = i + count;
    } else {
      i++;
    }
  }

  return source_blocks;
}

// rely on the fact that order of properties in a cell block is cell_type, metadata, source
// and so looking backwards we should be able to find the cell_type in a few steps
function find_cell_type(current_line, lines) {
  for(let i = current_line - 1; i > 0; i--) {
    let match = lines[i].match(/^\s{3}"cell_type":/);

    if (match) {
      let match_type = lines[i].match(/"([^"]+)",$/);

      return match_type ? match_type[1] : null;
    }
  }

  return null;
}

function count_source_lines(source_property_line_number, content_lines) {
  let counter = 0;
  for(let i = source_property_line_number + 1; i < content_lines.length; i++) {
    let match = content_lines[i].match(/^\s{4}"/);
    if (match) {
      counter++;
    } else {
      break;
    }
  }

  return counter;
}


function absolute_line_number(reported_line_number, source_blocks) {
  let counter = 0; // a continuous line number indicator, within the extracted source code

  for(let i = 0; i < source_blocks.length; i++) {
    let { source_line, lines_of_code } = source_blocks[i];
    for (let j = 0; j < lines_of_code; j++) {
      counter++;
      if (counter === reported_line_number) {
        return {
          file_line_number: source_line + j,
          block_line_number: j
        };
      }
    }
  }
}
